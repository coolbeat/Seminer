

■AR　UnityProject改善

・作者が期待している端末
Tango端末
https://www.asus.com/jp/Phone/ZenFone-AR-ZS571KL/
予定と言われてているのは2017年4月から６月

・Unity開発テスト設計技法、テスト技法程議論されていない。
・Androidのテスト、設計方針をUnityでも利用できる


■high cost performance CI
同じ会社の方の発表の方を驚く


■弊社のアプリ開発のCI環境　
・カバレッジを１００パーセントにしたほうが良いが、現実的に大変。
・モジュールのに対して、何を入力したら何が返ってくることかを保証することが大事
・人力テストで悩ましい点、修正を入れた箇所ではないが、影響しないことの確認が
　しんどい。
・UIテストは、MonckyランナーやAppiumuがある。
・magic podはAppiumuのテストコードをUIを作って作成してくれるとのこと
・UIテストは、人の手でするテストは、雑になりやすく、漏れが発生しやすい
　MagicPodを全画面のUIチェックに利用されているとのこと
・MagicPodは何回もすると時間がかかるので、
 PR後にDevelopを更新するタイミングと毎朝決まった時間にながしているとのこと



■Using Kotolin for tests

追記なし


■Annotaitionを用いた現時刻のテスト
現在時刻の取得の方法はYukiMatumuraさんのGithab記載のものがよい。
良い点（スライド内に記載）テストもアノテーションで表現できるが、
Kotolinで表現するともっとわかりやすい表現になる。
Kotolinはアノテーションでコンストラクタを宣言できるので
YukiMatumuraさんのGithabのテストも読みやすいコードになるとのこと

■ノハナの話
・CIでTravisを選定した理由は、サーバー側が有料版を利用していたので
Android側もTravisを利用させてもらっていたとのこと
・TravisCronJobを利用してプルリクエストのタイミングではなく、定期（毎日）実行
　することで、プルリクエストの待ち時間を減少させた
・UI TestをTravisCronJobで今後していきたい
・Robolectric Cutsom ShadowはMockitを利用するより、staticメソッドでもmockができるとのこと

[Twitter]
下記の意見がちらほら
・Kotolinでテスト書いている。
・instramentedTestはCronでやるがよい。
・


■mvpアンチパターン
追記なし



■DevieFarmを諦めた話 あるいはUIテストについて再考する話
・多端末で動作確認したかったのではなく、実機でスルーテストをしたかった
・FirebaseTestLabについては、まだ調べてないが
　buildGradleのコマンドで作ったApkをドラッグ＆ドロップでapkをアップできるらしい
・アンドイロイドアカデミアという本を出していて他社のテストについて記載がある
　興味があったら見て欲しいとのこと


■軽量なDokerイメージで

追記なし


